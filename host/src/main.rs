// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
mod blockchain;

// The ELF is used for proving and the ID is used for verification.
use methods::{
    BLOCK_PROOF_ELF, BLOCK_PROOF_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use serde::{Deserialize, Serialize};
use blockchain::blockchain::{Block, Transaction, Blockchain};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let mut blockchain = Blockchain::new();

    let tx1 = Transaction {
        from: String::from("Finney"),
        to: String::from("Charles"),
        amount: 50,
    };
    let tx2 = Transaction {
        from: String::from("Isaac"),
        to: String::from("Pish"),
        amount: 30,
    };

    blockchain.build_block(vec![tx1, tx2]);

    let tx3 = Transaction {
        from: String::from("Suleiman"),
        to: String::from("Dave"),
        amount: 10,
    };
    blockchain.build_block(vec![tx3]);

    let serialize_blockchain = serde_json::to_string(&blockchain).unwrap();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // A default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    let env = ExecutorEnv::builder()
        .write(&serialize_blockchain)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, BLOCK_PROOF_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:

    let _output: String = receipt.journal.decode().unwrap();

    println!("{:?}", receipt);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(BLOCK_PROOF_ID)
        .unwrap();
}
